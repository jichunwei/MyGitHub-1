"""Verify Autonomous WLAN with L2 or L3 ACL option enabled.    expect result: All steps should result properly.        How to:        [L2 ACL allow]        1) Create a L2 ACL with option 'only allow' client 1 MAC         2) Create an Autonomous WLAN with L2 allow ACL        3) Verify client 1 can associate and client 2 cannot         4) Verify client 1 authorized status in ZD GUI        5) Configure an invalid route for active AP IP address and wait AP disconnected        6) Check WLAN info is still alive and client 1 still exists by AP CLI        7) Client 1 disconnect from WLAN        8) Verify client 1 still can associate and client 2 still cannot         9) Verify client 1 active in AP CLI        10) Delete all static routes and wait AP reconnected        11) Delete all WLANs and L2 ACLs                [L2 ACL deny]        1) Create a L2 ACL with option 'only deny' client 1 MAC         2) Create an Autonomous WLAN with L2 deny ACL        3) Verify client 1 cannot associate and client 2 can         4) Verify client 2 authorized status in ZD GUI        5) Configure an invalid route for active AP IP address and wait AP disconnected        6) Check WLAN info is still alive and client 2 still exists by AP CLI        7) Client 2 disconnect from WLAN        8) Verify client 1 still cannot associate and client 2 still can         9) Verify client 2 active in AP CLI        10) Delete all static routes and wait AP reconnected        11) Delete all WLANs and L2 ACLs        [L3 ACL allow]        1) Create a L3 ACL with option 'allow subnet 192.168.0.0/24 and deny all by default'         2) Create an Autonomous WLAN with L3 allow ACL        3) Verify client 1 can associate         4) Verify client 1 authorized status in ZD GUI        5) Verify client 1 can ping 192.168.0.252, cannot ping 172.16.10.252        6) Configure an invalid route for active AP IP address and wait AP disconnected        7) Check WLAN info is still alive and client 1 still exists by AP CLI        8) Verify client 2 can associate        9) Check client 2 alive by AP CLI         10) Verify client 1 still can ping 192.168.0.252, cannot ping 172.16.10.252        11) Verify client 2 can ping 192.168.0.252, cannot ping 172.16.10.252        12) Delete all static routes and wait AP reconnected        13) Delete all WLANs and L3 ACLs        [L3 ACL deny]        1) Create a L3 ACL with option 'deny subnet 192.168.0.0/24 and allow all by default'         2) Create an Autonomous WLAN with L3 allow ACL        3) Verify client 1 can associate         4) Verify client 1 authorized status in ZD GUI        5) Verify client 1 cannot ping 192.168.0.252, can ping 172.16.10.252        6) Configure an invalid route for active AP IP address and wait AP disconnected        7) Check WLAN info is still alive and client 1 still exists by AP CLI        8) Verify client 2 can associate        9) Check client 2 alive by AP CLI         10) Verify client 1 still cannot ping 192.168.0.252, can ping 172.16.10.252        11) Verify client 2 cannot ping 192.168.0.252, can ping 172.16.10.252        12) Delete all static routes and wait AP reconnected        13) Delete all WLANs and L3 ACLsCreated on 2013-05-15@author: chen.tao@odc-ruckuswireless.com"""import sysimport randomimport libZD_TestSuite as testsuitefrom RuckusAutoTest.common import Ratutils as utilsfrom RuckusAutoTest.common import lib_KwList as kwlistdef _define_l2_acl_cfg(acl_name,allowed_access = True):    acl_cfg = dict(acl_name = acl_name,    		   allowed_access = allowed_access,                   description = '',                   mac_list = [],                   sta_tag = 'sta_1')    return acl_cfgdef _define_l3_acl_rules(target_ip_subnet,action = 'Allow',):        rules = dict(action = action,                 order = '3',                 description = '',                 dst_addr = target_ip_subnet,                 application = 'Any',                 protocol = '',                 dst_port = '')                    return [rules]   def _define_l3_acl_cfg(name,rules,default_mode = 'deny-all',description = ''):    acl_cfg = dict(name = name,rules = rules,default_mode = default_mode,description = description)    return acl_cfg                  def _define_wlan_cfg(ssid,acl_name,l2_acl = True,auth='open', wpa_ver = '', encryption = 'none',                      key_index = '1', key_string = '',sta_auth = '', sta_wpa_ver = '', sta_encryption = '',):    if l2_acl:            wlan_cfg = dict(ssid = ssid,type = 'autonomous',acl_name = acl_name,auth = auth,wpa_ver = wpa_ver,                        encryption = encryption,key_index = key_index,key_string = key_string,sta_auth = sta_auth,                        sta_wpa_ver = sta_wpa_ver,sta_encryption = sta_encryption)    else:             wlan_cfg = dict(ssid = ssid,type = 'autonomous',l3_l4_acl_name = acl_name,auth = auth,wpa_ver = wpa_ver,                        encryption = encryption,key_index = key_index,key_string = key_string,sta_auth = sta_auth,                        sta_wpa_ver = sta_wpa_ver,sta_encryption = sta_encryption)    return wlan_cfg             	def define_test_cfg(cfg,wlan_cfg_param):    test_cfgs = []    target_ip_addr = '172.16.10.252'    radio_mode = cfg['radio_mode']    sta_radio_mode = radio_mode    ap_tag = 'ap%s' % radio_mode        test_name = 'CB_ZD_Remove_All_Wlans'    common_name = 'Remove all wlans'    test_cfgs.append(({}, test_name, common_name, 0, False))    test_name = 'CB_ZD_Remove_All_L2_ACLs'    common_name = 'Remove all L2 ACLs'    test_cfgs.append(({}, test_name, common_name, 0, False))        test_name = 'CB_ZD_Remove_All_L3_ACLs'    common_name = 'Remove all L3 ACLs'    test_cfgs.append(({}, test_name, common_name, 0, False))         test_name = 'CB_ZD_Config_Static_Route'    common_name = 'Delete all static routes'    test_cfgs.append(({'operation': 'delete all',                       'parameter': None}, test_name, common_name, 0, True))      test_name = 'CB_ZD_Create_Station'    common_name = 'Create station1'    test_cfgs.append(({'sta_tag':'sta_1','sta_ip_addr':cfg['target_station1']}, test_name, common_name, 0, False))        test_name = 'CB_ZD_Create_Station'    common_name = 'Create station2'    test_cfgs.append(({'sta_tag':'sta_2','sta_ip_addr':cfg['target_station2']}, test_name, common_name, 0, False))        test_name = 'CB_Station_Remove_All_Wlans'    common_name = 'Remove all WlANs from station1'    test_cfgs.append(({'sta_tag': 'sta_1'}, test_name, common_name, 0, False))        test_name = 'CB_Station_Remove_All_Wlans'    common_name = 'Remove all WlANs from station2'    test_cfgs.append(({'sta_tag': 'sta_2'}, test_name, common_name, 0, False))        test_name = 'CB_ZD_Config_AP_Radio'    common_name = 'Config All APs Radio - Disable WLAN Service'    test_params = {'cfg_type': 'init',                   'all_ap_mac_list': cfg['all_ap_mac_list']}    test_cfgs.append((test_params, test_name, common_name, 0, False))        test_name = 'CB_ZD_Create_Active_AP'    common_name = 'Create active AP'    test_cfgs.append(({'active_ap':cfg['active_ap_list'][0],                       'ap_tag': ap_tag}, test_name, common_name, 0, False))        test_name = 'CB_ZD_Config_AP_Radio'    common_name = 'Config active AP Radio %s - Enable WLAN Service' % (radio_mode)    test_params = {'cfg_type': 'config',                   'ap_tag': ap_tag,                   'ap_cfg': {'radio': radio_mode, 'wlan_service': True},                   }    test_cfgs.append((test_params, test_name, common_name, 0, False))    test_name = 'CB_ZD_Config_AP_Auto_Recovery'    common_name = 'Config AP recovery option disabled'    test_cfgs.append(({'recovery_enabled': False}, test_name, common_name, 0, False))    test_case_name = "[L2_ACL_Allow]"        acl_cfg = _define_l2_acl_cfg('l2_acl_allow',True)    test_name = 'CB_ZD_Create_L2_ACL_by_Mac_List'    common_name = '%sCreate a L2 ACL to only allow station1' % (test_case_name)    test_cfgs.append((acl_cfg, test_name, common_name, 1, False))    wlan_cfg = _define_wlan_cfg('autonomous_wlan_l2_acl_allow','l2_acl_allow',True,                                 wlan_cfg_param[0], wlan_cfg_param[1], wlan_cfg_param[2], wlan_cfg_param[3],                                  wlan_cfg_param[4], wlan_cfg_param[5], wlan_cfg_param[6], wlan_cfg_param[7])    test_name = 'CB_ZD_Create_Wlan'    common_name = '%sCreate an autonomous wlan with l2_acl_allow' % (test_case_name)    test_cfgs.append(({'wlan_cfg_list':[wlan_cfg]}, test_name, common_name, 2, False))    test_name = 'CB_ZD_Associate_Station_1'    common_name = '%sVerify station1 can associate' % (test_case_name)    test_cfgs.append(({'sta_tag':'sta_1','wlan_cfg':wlan_cfg,'is_negative':False,     	               'is_restart_adapter':True}, test_name, common_name, 2, False))    	    test_name = 'CB_ZD_Associate_Station_1'    common_name = '%sVerify station2 cannot associate' % (test_case_name)    test_cfgs.append(({'sta_tag':'sta_2','wlan_cfg':wlan_cfg,'is_negative':True,     	               'is_restart_adapter':True}, test_name, common_name, 2, False))    	    test_name = 'CB_ZD_Get_Station_Wifi_Addr_1'    common_name = '%sGet WiFi address of station1' % (test_case_name)    test_cfgs.append(({'sta_tag': 'sta_1'}, test_name, common_name, 2, False))    	    test_name = 'CB_ZD_Verify_Station_Info_V2'    common_name = '%sVerify station1 information Authorized status in ZD' % (test_case_name)    test_cfgs.append(({'sta_tag': 'sta_1',                       'ap_tag': ap_tag,                       'status': 'Authorized',                       'wlan_cfg': wlan_cfg,                       'radio_mode':sta_radio_mode,},                       test_name, common_name, 2, False))        test_name = 'CB_ZD_Client_Ping_Dest'    common_name = '%sVerify station1 can ping target IP' % (test_case_name)    test_cfgs.append(({'sta_tag': 'sta_1',                       'condition': 'allowed',                       'target': target_ip_addr}, test_name, common_name, 2, False))    test_name = 'CB_ZD_Config_Static_Route'    common_name = '%sConfigure an invalid route in ZD to make AP disconnected' % (test_case_name)    test_cfgs.append(({'operation': 'add',                       'parameter': None, 'ap_tag': ap_tag}, test_name, common_name, 2, False))    test_name = 'CB_ZD_Wait_AP_Status'    common_name = '%sVerify AP status changed to disconnected' % (test_case_name)    test_cfgs.append(({'ap_tag': ap_tag, 'expected_status':'disconnected'}, test_name, common_name, 2, False))	    test_name = 'CB_AP_CLI_Check_Station'    common_name = '%sCheck station1 is not kicked out when AP got disconnected' % (test_case_name)    test_cfgs.append(({'ap_tag': ap_tag, 'ssid': wlan_cfg['ssid'],                       'sta_tag': 'sta_1'}, test_name, common_name, 2, False))	               test_name = 'CB_ZD_Client_Ping_Dest'    common_name = '%sVerify station1 still can ping target IP when AP got disconnected' % (test_case_name)    test_cfgs.append(({'sta_tag': 'sta_1',                       'condition': 'allowed',                       'target': target_ip_addr}, test_name, common_name, 2, False))                       	    test_name = 'CB_Station_Remove_All_Wlans'    common_name = '%sStation1 disconnects from wlan when AP got disconnected'% (test_case_name)    test_cfgs.append(({'sta_tag': 'sta_1'}, test_name, common_name, 2, False))    test_name = 'CB_ZD_Associate_Station_1'    common_name = '%sVerify station1 can associate when AP got disconnected' % (test_case_name)    test_cfgs.append(({'sta_tag':'sta_1','wlan_cfg':wlan_cfg,'is_negative':False,                        'is_restart_adapter':True}, test_name, common_name, 2, False))            test_name = 'CB_ZD_Associate_Station_1'    common_name = '%sVerify station2 cannot associate when AP got disconnected' % (test_case_name)    test_cfgs.append(({'sta_tag':'sta_2','wlan_cfg':wlan_cfg,'is_negative':True,                        'is_restart_adapter':True}, test_name, common_name, 2, False))    test_name = 'CB_ZD_Get_Station_Wifi_Addr_1'    common_name = '%sGet WiFi address of station1 when AP got disconnected' % (test_case_name)    test_cfgs.append(({'sta_tag': 'sta_1'}, test_name, common_name, 2, False))            test_name = 'CB_AP_CLI_Check_Station'    common_name = '%sCheck station1 is available when AP got disconnected' % (test_case_name)    test_cfgs.append(({'ap_tag': ap_tag, 'ssid': wlan_cfg['ssid'],                       'sta_tag': 'sta_1'}, test_name, common_name, 2, False))                    test_name = 'CB_ZD_Client_Ping_Dest'    common_name = '%sVerify station1 can ping target IP when AP got disconnected' % (test_case_name)    test_cfgs.append(({'sta_tag': 'sta_1',                       'condition': 'allowed',                       'target': target_ip_addr}, test_name, common_name, 2, False))    test_name = 'CB_ZD_Config_Static_Route'    common_name = '%sDelete all static routes to make AP connected' % (test_case_name)    test_cfgs.append(({'operation': 'delete all',                       'parameter': None}, test_name, common_name, 2, True))       test_name = 'CB_ZD_Wait_AP_Status'    common_name = '%sVerify AP status changed to connected' % (test_case_name)    test_cfgs.append(({'ap_tag': ap_tag, 'expected_status':'connected'}, test_name, common_name, 2, True))                       	    test_name = 'CB_Station_Remove_All_Wlans'    common_name = '%sRemove the wlan from station1'% (test_case_name)    test_cfgs.append(({'sta_tag': 'sta_1'}, test_name, common_name, 2, True))    	    test_name = 'CB_Station_Remove_All_Wlans'    common_name = '%sRemove the wlan from station2'% (test_case_name)    test_cfgs.append(({'sta_tag': 'sta_2'}, test_name, common_name, 2, True))        test_name = 'CB_ZD_Remove_All_Wlans'    common_name = '%sRemove all wlans'% (test_case_name)    test_cfgs.append(({}, test_name, common_name, 2, True))    test_name = 'CB_ZD_Remove_All_L2_ACLs'    common_name = '%sRemove all L2 ACLs'% (test_case_name)    test_cfgs.append(({}, test_name, common_name, 2, True))        test_case_name = "[L2_ACL_Deny]"    acl_cfg = _define_l2_acl_cfg('l2_acl_deny',False)    test_name = 'CB_ZD_Create_L2_ACL_by_Mac_List'    common_name = '%sCreate a L2 ACL to only deny station1'% (test_case_name)    test_cfgs.append((acl_cfg, test_name, common_name, 1, False))    wlan_cfg = _define_wlan_cfg('autonomous_wlan_l2_acl_deny','l2_acl_deny',True,                                wlan_cfg_param[0], wlan_cfg_param[1], wlan_cfg_param[2], wlan_cfg_param[3],                                 wlan_cfg_param[4],wlan_cfg_param[5], wlan_cfg_param[6], wlan_cfg_param[7])    test_name = 'CB_ZD_Create_Wlan'    common_name = '%sCreate an autonomous wlan with l2_acl_deny' % (test_case_name)    test_cfgs.append(({'wlan_cfg_list':[wlan_cfg]}, test_name, common_name, 2, False))    test_name = 'CB_ZD_Associate_Station_1'    common_name = '%sVerify station1 cannot associate'% (test_case_name)    test_cfgs.append(({'sta_tag':'sta_1','wlan_cfg':wlan_cfg,'is_negative':True,     	               'is_restart_adapter':True}, test_name, common_name, 2, False))    test_name = 'CB_ZD_Associate_Station_1'    common_name = '%sVerify station2 can associate'% (test_case_name)    test_cfgs.append(({'sta_tag':'sta_2','wlan_cfg':wlan_cfg,'is_negative':False,     	               'is_restart_adapter':True}, test_name, common_name, 2, False))    test_name = 'CB_ZD_Get_Station_Wifi_Addr_1'    common_name = '%sGet WiFi address of station2' % (test_case_name)    test_cfgs.append(({'sta_tag': 'sta_2'}, test_name, common_name, 2, False))            test_name = 'CB_ZD_Verify_Station_Info_V2'    common_name = '%sVerify station2 information Authorized status in ZD' % (test_case_name)    test_cfgs.append(({'sta_tag': 'sta_2',                       'ap_tag': ap_tag,                       'status': 'Authorized',                       'wlan_cfg': wlan_cfg,                       'radio_mode':sta_radio_mode,},                       test_name, common_name, 2, False))        test_name = 'CB_ZD_Client_Ping_Dest'    common_name = '%sVerify station2 can ping target IP' % (test_case_name)    test_cfgs.append(({'sta_tag': 'sta_2',                       'condition': 'allowed',                       'target': target_ip_addr}, test_name, common_name, 2, False))    test_name = 'CB_ZD_Config_Static_Route'    common_name = '%sConfigure an invalid route in ZD to make AP disconnected' % (test_case_name)    test_cfgs.append(({'operation': 'add',                       'parameter': None, 'ap_tag': ap_tag}, test_name, common_name, 2, False))    test_name = 'CB_ZD_Wait_AP_Status'    common_name = '%sVerify AP status changed to disconnected' % (test_case_name)    test_cfgs.append(({'ap_tag': ap_tag, 'expected_status':'disconnected'}, test_name, common_name, 2, False))	    test_name = 'CB_AP_CLI_Check_Station'    common_name = '%sCheck station2 is not kicked out when AP got disconnected' % (test_case_name)    test_cfgs.append(({'ap_tag': ap_tag, 'ssid': wlan_cfg['ssid'],                       'sta_tag': 'sta_2'}, test_name, common_name, 2, False))	               test_name = 'CB_ZD_Client_Ping_Dest'    common_name = '%sVerify station2 still can ping target IP when AP got disconnected' % (test_case_name)    test_cfgs.append(({'sta_tag': 'sta_2',                       'condition': 'allowed',                       'target': target_ip_addr}, test_name, common_name, 2, False))    test_name = 'CB_Station_Remove_All_Wlans'    common_name = '%sStation2 disconnects from wlan when AP got disconnected'% (test_case_name)    test_cfgs.append(({'sta_tag': 'sta_1'}, test_name, common_name, 2, False))    test_name = 'CB_ZD_Associate_Station_1'    common_name = '%sVerify station1 cannot associate when AP got disconnected' % (test_case_name)    test_cfgs.append(({'sta_tag':'sta_1','wlan_cfg':wlan_cfg,'is_negative':True,                        'is_restart_adapter':True}, test_name, common_name, 2, False))            test_name = 'CB_ZD_Associate_Station_1'    common_name = '%sVerify station2 can associate when AP got disconnected' % (test_case_name)    test_cfgs.append(({'sta_tag':'sta_2','wlan_cfg':wlan_cfg,'is_negative':False,                        'is_restart_adapter':True}, test_name, common_name, 2, False))    test_name = 'CB_ZD_Get_Station_Wifi_Addr_1'    common_name = '%sGet WiFi address of station2 when AP got disconnected' % (test_case_name)    test_cfgs.append(({'sta_tag': 'sta_2'}, test_name, common_name, 2, False))            test_name = 'CB_AP_CLI_Check_Station'    common_name = '%sCheck station2 is available when AP got disconnected' % (test_case_name)    test_cfgs.append(({'ap_tag': ap_tag, 'ssid': wlan_cfg['ssid'],                       'sta_tag': 'sta_2'}, test_name, common_name, 2, False))                    test_name = 'CB_ZD_Client_Ping_Dest'    common_name = '%sVerify station2 can ping target IP when AP got disconnected' % (test_case_name)    test_cfgs.append(({'sta_tag': 'sta_2',                       'condition': 'allowed',                       'target': target_ip_addr}, test_name, common_name, 2, False))    test_name = 'CB_ZD_Config_Static_Route'    common_name = '%sDelete all static routes to make AP connected' % (test_case_name)    test_cfgs.append(({'operation': 'delete all',                       'parameter': None}, test_name, common_name, 2, True))       test_name = 'CB_ZD_Wait_AP_Status'    common_name = '%sVerify AP status changed to connected' % (test_case_name)    test_cfgs.append(({'ap_tag': ap_tag, 'expected_status':'connected'}, test_name, common_name, 2, True))                       	    test_name = 'CB_Station_Remove_All_Wlans'    common_name = '%sRemove the wlan from station1'% (test_case_name)    test_cfgs.append(({'sta_tag': 'sta_1'}, test_name, common_name, 2, True))    	    test_name = 'CB_Station_Remove_All_Wlans'    common_name = '%sRemove the wlan from station2'% (test_case_name)    test_cfgs.append(({'sta_tag': 'sta_2'}, test_name, common_name, 2, True))        test_name = 'CB_ZD_Remove_All_Wlans'    common_name = '%sRemove all wlans'% (test_case_name)    test_cfgs.append(({}, test_name, common_name, 2, True))    test_name = 'CB_ZD_Remove_All_L2_ACLs'    common_name = '%sRemove all L2 ACLs'% (test_case_name)    test_cfgs.append(({}, test_name, common_name, 2, True))    target_ip_addr1 = '192.168.0.252'    target_ip_addr2 = '172.16.10.252'    target_ip_subnet = r'192.168.0.0/24'        test_case_name = "[L3_ACL_Allow]"        rules = _define_l3_acl_rules(target_ip_subnet,'Allow')    acl_cfg = _define_l3_acl_cfg('l3_acl_allow_dst1_deny_others',rules)    test_name = 'CB_ZD_Create_L3_ACL_by_IP_Subnet'    common_name = '%sCreate a L3 ACL to only allow subnet %s' % (test_case_name,target_ip_subnet)    test_cfgs.append((acl_cfg, test_name, common_name, 1, False))    wlan_cfg = _define_wlan_cfg('autonomous_wlan_l3_acl_allow','l3_acl_allow_dst1_deny_others',False,                                wlan_cfg_param[0], wlan_cfg_param[1], wlan_cfg_param[2], wlan_cfg_param[3],                                 wlan_cfg_param[4],wlan_cfg_param[5], wlan_cfg_param[6], wlan_cfg_param[7])    test_name = 'CB_ZD_Create_Wlan'    common_name = '%sCreate an autonomous wlan with l3_acl_allow' % (test_case_name)    test_cfgs.append(({'wlan_cfg_list':[wlan_cfg]}, test_name, common_name, 2, False))    test_name = 'CB_ZD_Associate_Station_1'    common_name = '%sVerify station1 can associate' % (test_case_name)    test_cfgs.append(({'sta_tag':'sta_1','wlan_cfg':wlan_cfg,'is_negative':False,    	               'is_restart_adapter':True}, test_name,common_name,2,False))    test_name = 'CB_ZD_Get_Station_Wifi_Addr_1'    common_name = '%sGet WiFi address of station1' % (test_case_name)    test_cfgs.append(({'sta_tag': 'sta_1'}, test_name, common_name, 2, False))    	            test_name = 'CB_ZD_Verify_Station_Info_V2'    common_name = '%sVerify station1 information Authorized status in ZD' % (test_case_name)    test_cfgs.append(({'sta_tag': 'sta_1',                       'ap_tag': ap_tag,                       'status': 'Authorized',                       'wlan_cfg': wlan_cfg,                       'radio_mode':sta_radio_mode,},                       test_name, common_name, 2, False))                             test_name = 'CB_ZD_Client_Ping_Dest'    common_name = '%sVerify station1 can ping %s' % (test_case_name,target_ip_addr1)    test_cfgs.append(({'sta_tag': 'sta_1',                       'condition': 'allowed',                       'target': target_ip_addr1}, test_name, common_name, 2, False))                 test_name = 'CB_ZD_Client_Ping_Dest'    common_name = '%sVerify station1 cannot ping %s' % (test_case_name,target_ip_addr2)    test_cfgs.append(({'sta_tag': 'sta_1',                       'condition': 'disallowed',                       'target': target_ip_addr2}, test_name, common_name, 2, False))        test_name = 'CB_ZD_Config_Static_Route'    common_name = '%sConfigure an invalid route to AP' % (test_case_name)    test_cfgs.append(({'operation': 'add',                       'parameter': None, 'ap_tag': ap_tag}, test_name, common_name, 2, False))    test_name = 'CB_ZD_Wait_AP_Status'    common_name = '%sWait active AP status changed to disconnected' % (test_case_name)    test_cfgs.append(({'ap_tag': ap_tag, 'expected_status':'disconnected'}, test_name, common_name, 2, False))    	    test_name = 'CB_AP_CLI_Check_Station'    common_name = '%sCheck station1 is not kicked out' % (test_case_name)    test_cfgs.append(({'ap_tag': ap_tag, 'ssid': wlan_cfg['ssid'],                       'sta_tag': 'sta_1'}, test_name, common_name, 2, False))       test_name = 'CB_ZD_Associate_Station_1'    common_name = '%sVerify station2 still can associate' % (test_case_name)    test_cfgs.append(({'sta_tag':'sta_2','wlan_cfg':wlan_cfg,'is_negative':False,    	                 'is_restart_adapter':True}, test_name, common_name, 2, False))    test_name = 'CB_ZD_Get_Station_Wifi_Addr_1'    common_name = '%sGet WiFi address of station2' % (test_case_name)    test_cfgs.append(({'sta_tag': 'sta_2'}, test_name, common_name, 2, False))       test_name = 'CB_AP_CLI_Check_Station'    common_name = '%sCheck station2 is available in AP CLI' % (test_case_name)    test_cfgs.append(({'ap_tag': ap_tag, 'ssid': wlan_cfg['ssid'],                       'sta_tag': 'sta_2'}, test_name, common_name, 2, False))            test_name = 'CB_ZD_Client_Ping_Dest'    common_name = '%sVerify station1 still can ping %s' % (test_case_name,target_ip_addr1)    test_cfgs.append(({'sta_tag': 'sta_1',                       'condition': 'allowed',                       'target': target_ip_addr1}, test_name, common_name, 2, False))    test_name = 'CB_ZD_Client_Ping_Dest'    common_name = '%sVerify station1 still cannot ping %s' % (test_case_name,target_ip_addr2)    test_cfgs.append(({'sta_tag': 'sta_1',                       'condition': 'disallowed',                       'target': target_ip_addr2}, test_name, common_name, 2, False))                       	    test_name = 'CB_ZD_Client_Ping_Dest'    common_name = '%sVerify station2 can ping %s' % (test_case_name,target_ip_addr1)    test_cfgs.append(({'sta_tag': 'sta_1',                       'condition': 'allowed',                       'target': target_ip_addr1}, test_name, common_name, 2, False))    test_name = 'CB_ZD_Client_Ping_Dest'    common_name = '%sVerify station2 cannot ping %s' % (test_case_name,target_ip_addr2)    test_cfgs.append(({'sta_tag': 'sta_1',                       'condition': 'disallowed',                       'target': target_ip_addr2}, test_name, common_name, 2, False))                                                 test_name = 'CB_Station_Remove_All_Wlans'    common_name = '%sRemove the wlan from station1' % (test_case_name)    test_cfgs.append(({'sta_tag': 'sta_1'}, test_name, common_name, 2, True))    	    test_name = 'CB_Station_Remove_All_Wlans'    common_name = '%sRemove the wlan from station2' % (test_case_name)    test_cfgs.append(({'sta_tag': 'sta_2'}, test_name, common_name, 2, True))        test_name = 'CB_ZD_Config_Static_Route'    common_name = '%sDelete all static routes' % (test_case_name)    test_cfgs.append(({'operation': 'delete all',                       'parameter': None}, test_name, common_name, 2, True))                   test_name = 'CB_ZD_Remove_All_Wlans'    common_name = '%sRemove all wlans' % (test_case_name)    test_cfgs.append(({}, test_name, common_name, 2, True))    test_name = 'CB_ZD_Remove_All_L3_ACLs'    common_name = '%sRemove all L3 ACLs' % (test_case_name)    test_cfgs.append(({}, test_name, common_name, 2, True))        test_case_name = "[L3_ACL_Deny]"    rules = _define_l3_acl_rules(target_ip_subnet,'Deny')    acl_cfg = _define_l3_acl_cfg('l3_acl_deny_dst1_allow_others',rules,'allow-all')    test_name = 'CB_ZD_Create_L3_ACL_by_IP_Subnet'    common_name = '%sCreate a L3 ACL to only deny subnet %s'% (test_case_name,target_ip_subnet)    test_cfgs.append((acl_cfg, test_name, common_name, 1, False))    wlan_cfg = _define_wlan_cfg('autonomous_wlan_l3_acl_deny','l3_acl_deny_dst1_allow_others',False,                                wlan_cfg_param[0], wlan_cfg_param[1], wlan_cfg_param[2], wlan_cfg_param[3],                                 wlan_cfg_param[4],wlan_cfg_param[5], wlan_cfg_param[6], wlan_cfg_param[7])    test_name = 'CB_ZD_Create_Wlan'    common_name = '%sCreate an autonomous wlan with l3_acl_deny'% (test_case_name)    test_cfgs.append(({'wlan_cfg_list':[wlan_cfg]}, test_name, common_name, 2, False))    test_name = 'CB_ZD_Associate_Station_1'    common_name = '%sVerify station1 can associate'% (test_case_name)    test_cfgs.append(({'sta_tag':'sta_1','wlan_cfg':wlan_cfg,'is_restart_adapter':True},test_name,common_name,2,False))    test_name = 'CB_ZD_Get_Station_Wifi_Addr_1'    common_name = '%sGet WiFi address of station1' % (test_case_name)    test_cfgs.append(({'sta_tag': 'sta_1'}, test_name, common_name, 2, False))    	            test_name = 'CB_ZD_Verify_Station_Info_V2'    common_name = '%sVerify station1 information Authorized status in ZD' % (test_case_name)    test_cfgs.append(({'sta_tag': 'sta_1',                       'ap_tag': ap_tag,                       'status': 'Authorized',                       'wlan_cfg': wlan_cfg,                       'radio_mode':sta_radio_mode,},                       test_name, common_name, 2, False))                               test_name = 'CB_ZD_Client_Ping_Dest'    common_name = '%sVerify station1 cannot ping %s' % (test_case_name,target_ip_addr1)    test_cfgs.append(({'sta_tag': 'sta_1',                       'condition': 'disallowed',                       'target': target_ip_addr1}, test_name, common_name, 2, False))                        test_name = 'CB_ZD_Client_Ping_Dest'    common_name = '%sVerify station1 can ping %s' % (test_case_name,target_ip_addr2)    test_cfgs.append(({'sta_tag': 'sta_1',                       'condition': 'allowed',                       'target': target_ip_addr2}, test_name, common_name, 2, False))                       	    test_name = 'CB_ZD_Config_Static_Route'    common_name = '%sConfigure an invalid route to AP' % (test_case_name)    test_cfgs.append(({'operation': 'add',                       'parameter': None, 'ap_tag': ap_tag}, test_name, common_name, 2, False))    test_name = 'CB_ZD_Wait_AP_Status'    common_name = '%sWait active AP status changed to disconnected' % (test_case_name)    test_cfgs.append(({'ap_tag': ap_tag, 'expected_status':'disconnected'}, test_name, common_name, 2, False))    test_name = 'CB_AP_CLI_Check_Station'    common_name = '%sCheck station1 is not kicked out' % (test_case_name)    test_cfgs.append(({'ap_tag': ap_tag, 'ssid': wlan_cfg['ssid'],                       'sta_tag': 'sta_1'}, test_name, common_name, 2, False))    	                           	    test_name = 'CB_ZD_Associate_Station_1'    common_name = '%sVerify station2 can associate' % (test_case_name)    test_cfgs.append(({'sta_tag':'sta_2','wlan_cfg':wlan_cfg,'is_restart_adapter':True},test_name,common_name,2,False))        test_name = 'CB_ZD_Get_Station_Wifi_Addr_1'    common_name = '%sGet WiFi address of station2' % (test_case_name)    test_cfgs.append(({'sta_tag': 'sta_2'}, test_name, common_name, 2, False))                test_name = 'CB_AP_CLI_Check_Station'    common_name = '%sCheck station2 is available in AP CLI' % (test_case_name)    test_cfgs.append(({'ap_tag': ap_tag, 'ssid': wlan_cfg['ssid'],                       'sta_tag': 'sta_2'}, test_name, common_name, 2, False))    test_name = 'CB_ZD_Client_Ping_Dest'    common_name = '%sVerify station1 still cannot ping %s' % (test_case_name,target_ip_addr1)    test_cfgs.append(({'sta_tag': 'sta_1',                       'condition': 'disallowed',                       'target': target_ip_addr1}, test_name, common_name, 2, False))                        test_name = 'CB_ZD_Client_Ping_Dest'    common_name = '%sVerify station1 still can ping %s' % (test_case_name,target_ip_addr2)    test_cfgs.append(({'sta_tag': 'sta_1',                       'condition': 'allowed',                       'target': target_ip_addr2}, test_name, common_name, 2, False))    test_name = 'CB_ZD_Client_Ping_Dest'    common_name = '%sVerify station2 cannot ping %s' % (test_case_name,target_ip_addr1)    test_cfgs.append(({'sta_tag': 'sta_2',                       'condition': 'disallowed',                       'target': target_ip_addr1}, test_name, common_name, 2, False))                        test_name = 'CB_ZD_Client_Ping_Dest'    common_name = '%sVerify station2 can ping %s' % (test_case_name,target_ip_addr2)    test_cfgs.append(({'sta_tag': 'sta_2',                       'condition': 'allowed',                       'target': target_ip_addr2}, test_name, common_name, 2, False))                       	                           test_name = 'CB_Station_Remove_All_Wlans'    common_name = 'Remove the wlan from station1 after test'    test_cfgs.append(({'sta_tag': 'sta_1'}, test_name, common_name, 0, True))    	    test_name = 'CB_Station_Remove_All_Wlans'    common_name = 'Remove the wlan from station2 after test'    test_cfgs.append(({'sta_tag': 'sta_2'}, test_name, common_name, 0, True))    	    test_name = 'CB_ZD_Config_Static_Route'    common_name = 'Delete all static routes after test'    test_cfgs.append(({'operation': 'delete all',                       'parameter': None}, test_name, common_name, 0, True))     	        test_name = 'CB_ZD_Remove_All_Wlans'    common_name = 'Remove all wlans after test'    test_cfgs.append(({}, test_name, common_name, 0, True))    test_name = 'CB_ZD_Remove_All_L2_ACLs'    common_name = 'Remove all L2 ACLs after test'    test_cfgs.append(({}, test_name, common_name, 0, True))        test_name = 'CB_ZD_Remove_All_L3_ACLs'    common_name = 'Remove all L3 ACLs after test'    test_cfgs.append(({}, test_name, common_name, 0, True))        test_name = 'CB_ZD_Config_AP_Radio'    common_name = 'Config All APs Radio - Enable WLAN Service'    test_params = {'cfg_type': 'teardown',                   'all_ap_mac_list': cfg['all_ap_mac_list']}    test_cfgs.append((test_params, test_name, common_name, 0, True))        test_name = 'CB_ZD_Config_AP_Auto_Recovery'    common_name = 'Config AP recovery option enabled'    test_cfgs.append(({'recovery_enabled': True}, test_name, common_name, 0, True))       return test_cfgs    def createTestSuite(**kwargs):    ts_config = dict(interactive_mode = True,                 station = (0,"g"),                 targetap = False,                 testsuite_name = "",                 )    ts_config.update(kwargs)    tb = testsuite.getTestbed2(**kwargs)    tbcfg = testsuite.getTestbedConfig(tb)        sta_ip_list = tbcfg['sta_ip_list']    ap_sym_dict = tbcfg['ap_sym_dict']    all_ap_mac_list = tbcfg['ap_mac_list']        if ts_config["interactive_mode"]:        target_sta1 = testsuite.getTargetStation(sta_ip_list, "Pick wireless station1: ")        target_sta2 = testsuite.getTargetStation(sta_ip_list, "Pick wireless station2: ")        target_sta_radio = testsuite.get_target_sta_radio()        active_ap_list = testsuite.getActiveAp(ap_sym_dict)    else:        target_sta = sta_ip_list[ts_cfg["station"][0]]        target_sta_radio = ts_cfg["station"][1]        if kwargs["targetap"]:            active_ap_list = sorted(ap_sym_dict.keys())    tcfg = {        'target_station1':'%s' % target_sta1,        'target_station2':'%s' % target_sta2,        'radio_mode': target_sta_radio,        'active_ap_list':active_ap_list,        'all_ap_mac_list': all_ap_mac_list,            }                   key_string_wpa      = utils.make_random_string(random.randint(8, 63), "hex")    key_string_wpa2     = utils.make_random_string(random.randint(8, 63), "hex")    key_string_wpa_mixed= utils.make_random_string(random.randint(8, 63), "hex")    key_string_wep64_0  = utils.make_random_string(10, "hex"),    key_string_wep128_0 = utils.make_random_string(26, "hex"),        if type(key_string_wep64_0) == type((1,2)):        key_string_wep64 = key_string_wep64_0[0]    else:        key_string_wep64 = key_string_wep64_0        if type(key_string_wep128_0) == type((1,2)):        key_string_wep128 = key_string_wep128_0[0]    else:        key_string_wep128 = key_string_wep128_0    #######<auth>  <wpa_ver> <encryption> <key_index> <key_string> <sta_auth> <sta_wpa_ver> <sta_encryption>######     list = [('open', '', 'none', '', '', 'open', '', 'none'),#1           ('PSK', 'WPA', 'TKIP', '', key_string_wpa,'PSK', 'WPA', 'TKIP'),#2           ('PSK', 'WPA', 'AES', '', key_string_wpa,'PSK', 'WPA', 'AES'), #3           ('PSK', 'WPA', 'Auto', '', key_string_wpa,'PSK', 'WPA', 'TKIP'), #4           ('PSK', 'WPA', 'Auto', '', key_string_wpa,'PSK', 'WPA', 'AES'), #5           ('PSK', 'WPA2', 'TKIP', '', key_string_wpa2,'PSK', 'WPA2', 'TKIP'),#6           ('PSK', 'WPA2', 'AES', '', key_string_wpa2,'PSK', 'WPA2', 'AES'),#7           ('PSK', 'WPA2', 'Auto', '', key_string_wpa2, 'PSK', 'WPA2', 'TKIP'), #8           ('PSK', 'WPA2', 'Auto', '', key_string_wpa2, 'PSK', 'WPA2', 'AES'), #9           ('PSK', 'WPA_Mixed', 'TKIP', '', key_string_wpa_mixed, 'PSK', 'WPA', 'TKIP'),  #10           ('PSK', 'WPA_Mixed', 'TKIP', '', key_string_wpa_mixed, 'PSK', 'WPA2', 'TKIP'),  #11           ('PSK', 'WPA_Mixed', 'AES', '', key_string_wpa_mixed, 'PSK', 'WPA', 'AES'),  #12           ('PSK', 'WPA_Mixed', 'AES', '', key_string_wpa_mixed, 'PSK', 'WPA2', 'AES'),  #13           ('PSK', 'WPA_Mixed', 'Auto', '', key_string_wpa_mixed, 'PSK', 'WPA', 'TKIP'), #14           ('PSK', 'WPA_Mixed', 'Auto', '', key_string_wpa_mixed, 'PSK', 'WPA', 'AES'), #15           ('PSK', 'WPA_Mixed', 'Auto', '', key_string_wpa_mixed, 'PSK', 'WPA2', 'TKIP'), #16           ('PSK', 'WPA_Mixed', 'Auto', '', key_string_wpa_mixed, 'PSK', 'WPA2', 'AES'), #17           ('open', '', 'WEP-64', '1', key_string_wep64, 'open', '', 'WEP-64'),#18           ('open', '', 'WEP-128', '1', key_string_wep128, 'open', '', 'WEP-128'),#19            ]    select_option = raw_input("\n\    1.  Open None\n\    2.  WPA+TKIP\n\    3.  WPA+AES\n\    4.  WPA+AUTO,       station WPA+TKIP\n\    5.  WPA+AUTO,       station WPA+AES\n\    6.  WPA2+TKIP\n\    7.  WPA2+AES\n\    8.  WPA2+AUTO,      station WPA2+TKIP\n\    9.  WPA2+AUTO,      station WPA2+AES\n\    10. WPA_Mixed+TKIP, station WPA+TKIP\n\    11. WPA_Mixed+TKIP, station WPA2+TKIP\n\    12. WPA_Mixed+AES,  station WPA+AES\n\    13. WPA_Mixed+AES,  station WPA2+AES\n\    14. WPA_Mixed+AUTO, station WPA+TKIP\n\    15. WPA_Mixed+AUTO, station WPA+AES\n\    16. WPA_Mixed+AUTO, station WPA2+TKIP\n\    17. WPA_Mixed+AUTO, station WPA2+AES\n\    18. WEP-64\n\    19. WEP-128\n\n\    Select encryption type of Autonomous WLAN[1-19, default is 1 <Open None>]: ")        if not select_option or int(select_option) not in range(1,20):        select_option = 1                    test_cfgs = define_test_cfg(tcfg, list[int(select_option)-1])    if ts_config["testsuite_name"]:        ts_name = ts_config["testsuite_name"]    else:         ts_name = "Autonomous WLAN ACL"        ts = testsuite.get_testsuite(ts_name,"Autonomous WLAN ACL",combotest = True)        test_order = 1    test_added = 0    for test_params, testname, common_name, exc_level, is_cleanup in test_cfgs:        if testsuite.addTestCase(ts, testname, common_name, test_params, test_order, exc_level, is_cleanup) > 0:            test_added += 1            test_order += 1                   print "Add test case with test name: %s\n\t\common name: %s" % (testname, common_name)                print "\n-- Summary: added %d test cases into test suite '%s'" % (test_added, ts.name)if __name__ == "__main__":    _dict = kwlist.as_dict(sys.argv[1:])    createTestSuite(**_dict) 