
a.out:     file format elf32-i386

Disassembly of section .init:

08048278 <_init>:
 8048278:	55                   	push   %ebp
 8048279:	89 e5                	mov    %esp,%ebp
 804827b:	53                   	push   %ebx
 804827c:	83 ec 04             	sub    $0x4,%esp
 804827f:	e8 00 00 00 00       	call   8048284 <_init+0xc>
 8048284:	5b                   	pop    %ebx
 8048285:	81 c3 60 13 00 00    	add    $0x1360,%ebx
 804828b:	8b 93 fc ff ff ff    	mov    -0x4(%ebx),%edx
 8048291:	85 d2                	test   %edx,%edx
 8048293:	74 05                	je     804829a <_init+0x22>
 8048295:	e8 1e 00 00 00       	call   80482b8 <__gmon_start__@plt>
 804829a:	e8 e1 00 00 00       	call   8048380 <frame_dummy>
 804829f:	e8 fc 01 00 00       	call   80484a0 <__do_global_ctors_aux>
 80482a4:	58                   	pop    %eax
 80482a5:	5b                   	pop    %ebx
 80482a6:	c9                   	leave  
 80482a7:	c3                   	ret    
Disassembly of section .plt:

080482a8 <__gmon_start__@plt-0x10>:
 80482a8:	ff 35 e8 95 04 08    	pushl  0x80495e8
 80482ae:	ff 25 ec 95 04 08    	jmp    *0x80495ec
 80482b4:	00 00                	add    %al,(%eax)
	...

080482b8 <__gmon_start__@plt>:
 80482b8:	ff 25 f0 95 04 08    	jmp    *0x80495f0
 80482be:	68 00 00 00 00       	push   $0x0
 80482c3:	e9 e0 ff ff ff       	jmp    80482a8 <_init+0x30>

080482c8 <__libc_start_main@plt>:
 80482c8:	ff 25 f4 95 04 08    	jmp    *0x80495f4
 80482ce:	68 08 00 00 00       	push   $0x8
 80482d3:	e9 d0 ff ff ff       	jmp    80482a8 <_init+0x30>

080482d8 <printf@plt>:
 80482d8:	ff 25 f8 95 04 08    	jmp    *0x80495f8
 80482de:	68 10 00 00 00       	push   $0x10
 80482e3:	e9 c0 ff ff ff       	jmp    80482a8 <_init+0x30>
Disassembly of section .text:

080482f0 <_start>:
 80482f0:	31 ed                	xor    %ebp,%ebp
 80482f2:	5e                   	pop    %esi
 80482f3:	89 e1                	mov    %esp,%ecx
 80482f5:	83 e4 f0             	and    $0xfffffff0,%esp
 80482f8:	50                   	push   %eax
 80482f9:	54                   	push   %esp
 80482fa:	52                   	push   %edx
 80482fb:	68 30 84 04 08       	push   $0x8048430
 8048300:	68 40 84 04 08       	push   $0x8048440
 8048305:	51                   	push   %ecx
 8048306:	56                   	push   %esi
 8048307:	68 e8 83 04 08       	push   $0x80483e8
 804830c:	e8 b7 ff ff ff       	call   80482c8 <__libc_start_main@plt>
 8048311:	f4                   	hlt    
 8048312:	90                   	nop    
 8048313:	90                   	nop    
 8048314:	90                   	nop    
 8048315:	90                   	nop    
 8048316:	90                   	nop    
 8048317:	90                   	nop    
 8048318:	90                   	nop    
 8048319:	90                   	nop    
 804831a:	90                   	nop    
 804831b:	90                   	nop    
 804831c:	90                   	nop    
 804831d:	90                   	nop    
 804831e:	90                   	nop    
 804831f:	90                   	nop    

08048320 <__do_global_dtors_aux>:
 8048320:	55                   	push   %ebp
 8048321:	89 e5                	mov    %esp,%ebp
 8048323:	53                   	push   %ebx
 8048324:	83 ec 04             	sub    $0x4,%esp
 8048327:	80 3d 40 96 04 08 00 	cmpb   $0x0,0x8049640
 804832e:	75 40                	jne    8048370 <__do_global_dtors_aux+0x50>
 8048330:	8b 15 44 96 04 08    	mov    0x8049644,%edx
 8048336:	b8 08 95 04 08       	mov    $0x8049508,%eax
 804833b:	2d 04 95 04 08       	sub    $0x8049504,%eax
 8048340:	c1 f8 02             	sar    $0x2,%eax
 8048343:	8d 58 ff             	lea    -0x1(%eax),%ebx
 8048346:	39 da                	cmp    %ebx,%edx
 8048348:	73 1f                	jae    8048369 <__do_global_dtors_aux+0x49>
 804834a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 8048350:	8d 42 01             	lea    0x1(%edx),%eax
 8048353:	a3 44 96 04 08       	mov    %eax,0x8049644
 8048358:	ff 14 85 04 95 04 08 	call   *0x8049504(,%eax,4)
 804835f:	8b 15 44 96 04 08    	mov    0x8049644,%edx
 8048365:	39 da                	cmp    %ebx,%edx
 8048367:	72 e7                	jb     8048350 <__do_global_dtors_aux+0x30>
 8048369:	c6 05 40 96 04 08 01 	movb   $0x1,0x8049640
 8048370:	83 c4 04             	add    $0x4,%esp
 8048373:	5b                   	pop    %ebx
 8048374:	5d                   	pop    %ebp
 8048375:	c3                   	ret    
 8048376:	8d 76 00             	lea    0x0(%esi),%esi
 8048379:	8d bc 27 00 00 00 00 	lea    0x0(%edi),%edi

08048380 <frame_dummy>:
 8048380:	55                   	push   %ebp
 8048381:	89 e5                	mov    %esp,%ebp
 8048383:	83 ec 08             	sub    $0x8,%esp
 8048386:	a1 0c 95 04 08       	mov    0x804950c,%eax
 804838b:	85 c0                	test   %eax,%eax
 804838d:	74 12                	je     80483a1 <frame_dummy+0x21>
 804838f:	b8 00 00 00 00       	mov    $0x0,%eax
 8048394:	85 c0                	test   %eax,%eax
 8048396:	74 09                	je     80483a1 <frame_dummy+0x21>
 8048398:	c7 04 24 0c 95 04 08 	movl   $0x804950c,(%esp)
 804839f:	ff d0                	call   *%eax
 80483a1:	c9                   	leave  
 80483a2:	c3                   	ret    
 80483a3:	90                   	nop    

080483a4 <MAX>:
#include<stdio.h>
inline int MAX(int a,int b)
{
 80483a4:	55                   	push   %ebp
 80483a5:	89 e5                	mov    %esp,%ebp
 80483a7:	8b 55 08             	mov    0x8(%ebp),%edx
 80483aa:	8b 45 0c             	mov    0xc(%ebp),%eax
 80483ad:	39 d0                	cmp    %edx,%eax
 80483af:	7d 02                	jge    80483b3 <MAX+0xf>
 80483b1:	89 d0                	mov    %edx,%eax
    return a>b?a:b;
}
 80483b3:	5d                   	pop    %ebp
 80483b4:	c3                   	ret    

080483b5 <max>:
int a[]={9,4,5,5,6,6,63,3};
int max(int n)
{
 80483b5:	55                   	push   %ebp
 80483b6:	89 e5                	mov    %esp,%ebp
 80483b8:	53                   	push   %ebx
 80483b9:	83 ec 04             	sub    $0x4,%esp
 80483bc:	8b 5d 08             	mov    0x8(%ebp),%ebx
    return n==0?a[0]:MAX(a[n],max(n-1));
 80483bf:	85 db                	test   %ebx,%ebx
 80483c1:	75 07                	jne    80483ca <max+0x15>
 80483c3:	a1 20 96 04 08       	mov    0x8049620,%eax
 80483c8:	eb 18                	jmp    80483e2 <max+0x2d>
 80483ca:	8d 43 ff             	lea    -0x1(%ebx),%eax
 80483cd:	89 04 24             	mov    %eax,(%esp)
 80483d0:	e8 e0 ff ff ff       	call   80483b5 <max>
#include<stdio.h>
inline int MAX(int a,int b)
{
    return a>b?a:b;
 80483d5:	8b 14 9d 20 96 04 08 	mov    0x8049620(,%ebx,4),%edx
 80483dc:	39 d0                	cmp    %edx,%eax
 80483de:	7d 02                	jge    80483e2 <max+0x2d>
 80483e0:	89 d0                	mov    %edx,%eax
}
int a[]={9,4,5,5,6,6,63,3};
int max(int n)
{
    return n==0?a[0]:MAX(a[n],max(n-1));
}
 80483e2:	83 c4 04             	add    $0x4,%esp
 80483e5:	5b                   	pop    %ebx
 80483e6:	5d                   	pop    %ebp
 80483e7:	c3                   	ret    

080483e8 <main>:

int main()
{
 80483e8:	8d 4c 24 04          	lea    0x4(%esp),%ecx
 80483ec:	83 e4 f0             	and    $0xfffffff0,%esp
 80483ef:	ff 71 fc             	pushl  -0x4(%ecx)
 80483f2:	55                   	push   %ebp
 80483f3:	89 e5                	mov    %esp,%ebp
 80483f5:	51                   	push   %ecx
 80483f6:	83 ec 14             	sub    $0x14,%esp
    int c;
    c= max(9);
 80483f9:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
 8048400:	e8 b0 ff ff ff       	call   80483b5 <max>
    printf("c=%d\n",c);
 8048405:	89 44 24 04          	mov    %eax,0x4(%esp)
 8048409:	c7 04 24 f0 84 04 08 	movl   $0x80484f0,(%esp)
 8048410:	e8 c3 fe ff ff       	call   80482d8 <printf@plt>
    return 0;
}
 8048415:	b8 00 00 00 00       	mov    $0x0,%eax
 804841a:	83 c4 14             	add    $0x14,%esp
 804841d:	59                   	pop    %ecx
 804841e:	5d                   	pop    %ebp
 804841f:	8d 61 fc             	lea    -0x4(%ecx),%esp
 8048422:	c3                   	ret    
 8048423:	90                   	nop    
 8048424:	90                   	nop    
 8048425:	90                   	nop    
 8048426:	90                   	nop    
 8048427:	90                   	nop    
 8048428:	90                   	nop    
 8048429:	90                   	nop    
 804842a:	90                   	nop    
 804842b:	90                   	nop    
 804842c:	90                   	nop    
 804842d:	90                   	nop    
 804842e:	90                   	nop    
 804842f:	90                   	nop    

08048430 <__libc_csu_fini>:
 8048430:	55                   	push   %ebp
 8048431:	89 e5                	mov    %esp,%ebp
 8048433:	5d                   	pop    %ebp
 8048434:	c3                   	ret    
 8048435:	8d 74 26 00          	lea    0x0(%esi),%esi
 8048439:	8d bc 27 00 00 00 00 	lea    0x0(%edi),%edi

08048440 <__libc_csu_init>:
 8048440:	55                   	push   %ebp
 8048441:	89 e5                	mov    %esp,%ebp
 8048443:	57                   	push   %edi
 8048444:	56                   	push   %esi
 8048445:	53                   	push   %ebx
 8048446:	e8 4f 00 00 00       	call   804849a <__i686.get_pc_thunk.bx>
 804844b:	81 c3 99 11 00 00    	add    $0x1199,%ebx
 8048451:	83 ec 0c             	sub    $0xc,%esp
 8048454:	e8 1f fe ff ff       	call   8048278 <_init>
 8048459:	8d bb 18 ff ff ff    	lea    -0xe8(%ebx),%edi
 804845f:	8d 83 18 ff ff ff    	lea    -0xe8(%ebx),%eax
 8048465:	29 c7                	sub    %eax,%edi
 8048467:	c1 ff 02             	sar    $0x2,%edi
 804846a:	85 ff                	test   %edi,%edi
 804846c:	74 24                	je     8048492 <__libc_csu_init+0x52>
 804846e:	31 f6                	xor    %esi,%esi
 8048470:	8b 45 10             	mov    0x10(%ebp),%eax
 8048473:	89 44 24 08          	mov    %eax,0x8(%esp)
 8048477:	8b 45 0c             	mov    0xc(%ebp),%eax
 804847a:	89 44 24 04          	mov    %eax,0x4(%esp)
 804847e:	8b 45 08             	mov    0x8(%ebp),%eax
 8048481:	89 04 24             	mov    %eax,(%esp)
 8048484:	ff 94 b3 18 ff ff ff 	call   *-0xe8(%ebx,%esi,4)
 804848b:	83 c6 01             	add    $0x1,%esi
 804848e:	39 fe                	cmp    %edi,%esi
 8048490:	72 de                	jb     8048470 <__libc_csu_init+0x30>
 8048492:	83 c4 0c             	add    $0xc,%esp
 8048495:	5b                   	pop    %ebx
 8048496:	5e                   	pop    %esi
 8048497:	5f                   	pop    %edi
 8048498:	5d                   	pop    %ebp
 8048499:	c3                   	ret    

0804849a <__i686.get_pc_thunk.bx>:
 804849a:	8b 1c 24             	mov    (%esp),%ebx
 804849d:	c3                   	ret    
 804849e:	90                   	nop    
 804849f:	90                   	nop    

080484a0 <__do_global_ctors_aux>:
 80484a0:	55                   	push   %ebp
 80484a1:	89 e5                	mov    %esp,%ebp
 80484a3:	53                   	push   %ebx
 80484a4:	83 ec 04             	sub    $0x4,%esp
 80484a7:	a1 fc 94 04 08       	mov    0x80494fc,%eax
 80484ac:	83 f8 ff             	cmp    $0xffffffff,%eax
 80484af:	74 13                	je     80484c4 <__do_global_ctors_aux+0x24>
 80484b1:	bb fc 94 04 08       	mov    $0x80494fc,%ebx
 80484b6:	66 90                	xchg   %ax,%ax
 80484b8:	83 eb 04             	sub    $0x4,%ebx
 80484bb:	ff d0                	call   *%eax
 80484bd:	8b 03                	mov    (%ebx),%eax
 80484bf:	83 f8 ff             	cmp    $0xffffffff,%eax
 80484c2:	75 f4                	jne    80484b8 <__do_global_ctors_aux+0x18>
 80484c4:	83 c4 04             	add    $0x4,%esp
 80484c7:	5b                   	pop    %ebx
 80484c8:	5d                   	pop    %ebp
 80484c9:	c3                   	ret    
 80484ca:	90                   	nop    
 80484cb:	90                   	nop    
Disassembly of section .fini:

080484cc <_fini>:
 80484cc:	55                   	push   %ebp
 80484cd:	89 e5                	mov    %esp,%ebp
 80484cf:	53                   	push   %ebx
 80484d0:	83 ec 04             	sub    $0x4,%esp
 80484d3:	e8 00 00 00 00       	call   80484d8 <_fini+0xc>
 80484d8:	5b                   	pop    %ebx
 80484d9:	81 c3 0c 11 00 00    	add    $0x110c,%ebx
 80484df:	e8 3c fe ff ff       	call   8048320 <__do_global_dtors_aux>
 80484e4:	59                   	pop    %ecx
 80484e5:	5b                   	pop    %ebx
 80484e6:	c9                   	leave  
 80484e7:	c3                   	ret    
